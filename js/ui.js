/**
 * Main UI Module
 * 
 * This module serves as the main entry point for UI-related functionality.
 * It re-exports functionality from various UI modules to maintain backward compatibility.
 */

// Re-export functions from other UI modules
export { renderTariffEditor, updateTariffDisplay } from './tariffEditor.js';
export { renderApplianceList, updateApplianceEssentialToggle, updateApplianceContinuousToggle } from './applianceList.js';
export { displayRecommendations, showRecommendationsLoading, showRecommendationsError } from './recommendations.js';
export { toggleDarkMode, loadDarkModePreference, initDarkModeToggle } from './darkMode.js';
export { initUsageModeToggle, updateUsageModeToggle } from './usageModeToggle.js';
export { createEnergyChart, updateChartView, updateEnergyChart, aggregateData } from './chartUtils.js';
export { generateHourlyUsage, generateSolarGeneration, generateHourlyDistribution } from './dataGenerators.js';

// Current view state (day/week/month)
let currentView = 'day';

/**
 * Retrieves energy usage data from localStorage.
 * @returns {Array<object>} Parsed energy usage data or an empty array if not found or error occurs.
 */
function getUsageData() {
    try {
        const savedData = localStorage.getItem('energyUsageData');
        return savedData ? JSON.parse(savedData) : [];
    } catch (e) {
        console.error('Error loading usage data:', e);
        return [];
    }
}

/**
 * Retrieves solar generation data from localStorage.
 * @returns {Array<number>|Array<object>} Parsed solar generation data or an empty array if not found or error occurs.
 */
function getSolarData() {
    try {
        const savedData = localStorage.getItem('solarGenerationData');
        console.log('Retrieved solar data from localStorage:', savedData);
        const parsedData = savedData ? JSON.parse(savedData) : [];
        console.log('Parsed solar data:', parsedData);
        return parsedData;
    } catch (e) {
        console.error('Error loading solar data:', e);
        return [];
    }
}

/**
 * Update the bill overview section with the latest calculations.
 * @param {number} currentBill - Current estimated bill amount.
 * @param {number} targetBill - Target bill amount.
 * @param {Array<number>|Array<object>} solarData - Solar generation data (array of kWh values or objects with 'generated' property).
 * @param {Array<object>} [appliances] - Optional array of appliance objects for energy usage calculation.
 * @param {Array<object>|Array<number>|number} tariffData - Tariff data used for calculations.
 */
/**
 * Updates the data source indicator in the UI
 * @param {boolean} isAIGenerated - Whether the data was generated by AI
 */
export function updateDataSourceIndicator(isAIGenerated) {
  const indicator = document.getElementById('data-source-indicator');
  if (!indicator) {
    // Create indicator if it doesn't exist
    const newIndicator = document.createElement('div');
    newIndicator.id = 'data-source-indicator';
    newIndicator.className = 'text-xs px-2 py-1 rounded-md fixed top-4 right-4 z-50';
    document.body.appendChild(newIndicator);
    
    // Add tooltip
    newIndicator.setAttribute('title', 'Indicates whether current data is AI-generated or using local fallback');
    newIndicator.style.cursor = 'help';
  }
  
  const indicatorElement = document.getElementById('data-source-indicator');
  if (isAIGenerated) {
    indicatorElement.textContent = 'ðŸ¤– AI Data';
    indicatorElement.classList.remove('bg-yellow-100', 'text-yellow-800');
    indicatorElement.classList.add('bg-blue-100', 'text-blue-800');
  } else {
    indicatorElement.textContent = 'ðŸ“Š Local Data';
    indicatorElement.classList.remove('bg-blue-100', 'text-blue-800');
    indicatorElement.classList.add('bg-yellow-100', 'text-yellow-800');
  }
}

export function updateBillOverview(currentBill, targetBill, solarData, appliances, tariffData) {
    // Update monthly bill estimate
    const monthlyBillElement = document.getElementById('monthlyBillEstimate');
    if (monthlyBillElement) {
        monthlyBillElement.textContent = `RM ${currentBill.toFixed(2)}`;
    }
    
    // Update target bill
    const targetBillElement = document.getElementById('monthlyTargetBill');
    if (targetBillElement) {
        targetBillElement.textContent = `RM ${targetBill.toFixed(2)}`;
    }
    
    // Calculate and display the comparison result (after solar offset)
    const resultElement = document.getElementById('billComparisonResult');
    if (resultElement) {
        // Calculate bill after solar offset (same as above)
        let totalSolarKWh = 0;
        if (Array.isArray(solarData) && solarData.length > 0) {
            if (solarData.length === 24) {
                totalSolarKWh = solarData.reduce((sum, kwh) => sum + kwh, 0) * 30;
            } else if (solarData.length === 7) {
                totalSolarKWh = solarData.reduce((sum, kwh) => sum + kwh, 0) * 4.2857;
            } else {
                totalSolarKWh = solarData.reduce((sum, kwh) => sum + kwh, 0);
            }
        }
        let avgRate = 0;
        if (Array.isArray(tariffData) && tariffData.length > 0) {
            if (tariffData[0].ratePerKWh !== undefined) {
                const totalRate = tariffData.reduce((sum, rate) => sum + rate.ratePerKWh, 0);
                avgRate = totalRate / tariffData.length;
            } else if (typeof tariffData[0] === "number") {
                const totalRate = tariffData.reduce((sum, rate) => sum + rate, 0);
                avgRate = totalRate / tariffData.length;
            }
        } else if (typeof tariffData === "number") {
            avgRate = tariffData;
        } else {
            avgRate = 0.35;
        }
        const solarSavings = totalSolarKWh * avgRate;
        const billAfterSolar = Math.max(0, currentBill - solarSavings);
        const percentDiff = ((billAfterSolar - targetBill) / targetBill) * 100;
        const absPercentDiff = Math.abs(percentDiff).toFixed(0);

        if (percentDiff > 0) {
            resultElement.textContent = `${absPercentDiff}% Over`;
            resultElement.className = 'font-bold text-2xl text-red-600 dark:text-red-400';
        } else if (percentDiff < 0) {
            resultElement.textContent = `${absPercentDiff}% Under`;
            resultElement.className = 'font-bold text-2xl text-green-600 dark:text-green-400';
        } else {
            resultElement.textContent = 'On Target';
            resultElement.className = 'font-bold text-2xl text-green-600 dark:text-green-400';
        }
    }
    
    // Calculate and update total energy usage
    const totalEnergyUsageElement = document.getElementById('totalEnergyUsage');
    if (totalEnergyUsageElement && appliances && Array.isArray(appliances)) {
        // Calculate total energy usage from appliances
        let totalKWh = 0;
        appliances.forEach((appliance) => {
            const dailyKWh = (appliance.powerWatts * appliance.typicalDailyHours) / 1000;
            totalKWh += dailyKWh * 30; // Monthly usage
        });
        totalEnergyUsageElement.textContent = `${totalKWh.toFixed(1)} kWh`;
    } else if (totalEnergyUsageElement) {
        totalEnergyUsageElement.textContent = '0.0 kWh';
    }
    
    // Update solar contribution if solar data is available
    const solarContributionElement = document.getElementById('solarContribution');
    console.log('updateBillOverview - solarData:', solarData);
    console.log('solarContributionElement:', solarContributionElement);
    
    if (solarContributionElement) {
        if (solarData && solarData.length > 0) {
            console.log('Processing solar data array:', solarData);
            const totalSolar = solarData.reduce((sum, day) => {
                const value = typeof day === 'object' ? (day.generated || 0) : (day || 0);
                return sum + value;
            }, 0);
            console.log('Calculated totalSolar:', totalSolar);
            solarContributionElement.textContent = `${totalSolar.toFixed(1)} kWh`;
        } else {
            console.log('No valid solar data available');
            solarContributionElement.textContent = '0.0 kWh';
        }
    }

    // --- Update Bill After Solar Offset ---
    const billAfterSolarElement = document.getElementById('billAfterSolar');
    if (billAfterSolarElement) {
        // Calculate total solar generation for the month (kWh)
        let totalSolarKWh = 0;
        if (Array.isArray(solarData) && solarData.length > 0) {
            if (solarData.length === 24) {
                totalSolarKWh = solarData.reduce((sum, kwh) => sum + kwh, 0) * 30;
            } else if (solarData.length === 7) {
                totalSolarKWh = solarData.reduce((sum, kwh) => sum + kwh, 0) * 4.2857;
            } else {
                totalSolarKWh = solarData.reduce((sum, kwh) => sum + kwh, 0);
            }
        }
        // Calculate avgRate
        let avgRate = 0;
        if (Array.isArray(tariffData) && tariffData.length > 0) {
            if (tariffData[0].ratePerKWh !== undefined) {
                const totalRate = tariffData.reduce((sum, rate) => sum + rate.ratePerKWh, 0);
                avgRate = totalRate / tariffData.length;
            } else if (typeof tariffData[0] === "number") {
                const totalRate = tariffData.reduce((sum, rate) => sum + rate, 0);
                avgRate = totalRate / tariffData.length;
            }
        } else if (typeof tariffData === "number") {
            avgRate = tariffData;
        } else {
            avgRate = 0.35;
        }
        // Calculate savings from solar
        const solarSavings = totalSolarKWh * avgRate;
        // Calculate bill after solar offset
        const billAfterSolar = Math.max(0, currentBill - solarSavings);
        billAfterSolarElement.textContent = `RM ${billAfterSolar.toFixed(2)}`;
    }
}
